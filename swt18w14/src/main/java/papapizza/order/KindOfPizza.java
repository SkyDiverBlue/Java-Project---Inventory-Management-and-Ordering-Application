package papapizza.order;


import javax.persistence.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.TreeMap;
import java.util.UUID;


@Entity
@Table(name = "PizzaToSave")
public class KindOfPizza {


	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private long id;
	private TreeMap<String, Integer> toppings = new TreeMap<>();
	private LocalDateTime localDateTime = null;
	private String relatedOrder = "";
	private String name = "";
	private String price;
	private final String uuid = UUID.randomUUID().toString();
	private String userAcId = "";


	public KindOfPizza() {
	}

	/**
	 * Constructor
	 *
	 * @param localDateTime
	 * @param relatedOrder
	 * @param price
	 * @param name
	 */
	public KindOfPizza(LocalDateTime localDateTime, String relatedOrder, String price, String name) {
		this.localDateTime = localDateTime;
		this.relatedOrder = relatedOrder;
		this.price = price;
		this.name = name;
	}

	/**
	 * The specific id generated by Spring
	 *
	 * @return id
	 */
	public long getId() {
		return id;
	}

	/**
	 * the uuid to identify and compare to other Objects
	 *
	 * @return
	 */
	public String getUUID() {
		return uuid;
	}

	/**
	 * return all "Toppings" and their Quantity as serializable Objects
	 *
	 * @return
	 */
	public TreeMap<String, Integer> getToppings() {
		return toppings;
	}

	//localDateTime speichert für pizzen in warteliste den zeitpunkt der bestellungsaugnehme, für pizzen im ofen das ende der backzeit

	/**
	 * return the time of the Pizza related to its status
	 *
	 * @return LocalDateTime
	 */
	public LocalDateTime getTime() {
		return localDateTime;
	}

	/**
	 * Every Objects is part of an order, which has a specific id
	 *
	 * @return
	 */
	public String getRelatedOrder() {
		return relatedOrder;
	}

	/**
	 * The price as string to store it properly
	 *
	 * @return String
	 */
	public String getPrice() {
		return price;
	}

	/**
	 * The Name of the Pizza
	 *
	 * @return String
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Every Product has its own name and an specific amount, that will be added to our Map
	 *
	 * @param name
	 * @param amount
	 */
	public void addToppings(String name, Integer amount) {
		if (toppings.containsKey(name)) {
			toppings.replace(name, amount);
		} else {
			toppings.put(name, amount);
		}
	}

	/**
	 * Every Object has a special relation to one of our bakers
	 *
	 * @param string
	 */
	public void setUserAcId(String string) {
		this.userAcId = string;
	}

	/**
	 * In order to compare our pizza/baker relation with other Objects, we need to compare their UserAccountIds
	 *
	 * @return String
	 */
	public String getUserAcId() {
		return userAcId;
	}

	/**
	 * sets the time the pizza should finish baking
	 *
	 * @param localDateTime
	 */
	public void setTime(LocalDateTime localDateTime) {
		this.localDateTime = localDateTime;
	}

	/**
	 * returns the time in the german date format
	 * @return String
	 */
	public String getFormattedTime() {
		return localDateTime.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")) + ", "
				+ localDateTime.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT)) + " Uhr";
	}

}